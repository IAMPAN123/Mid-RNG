import pygame
import random
import button
import Rolling as r
import spritesheet

pygame.init()

# Set up the screen
screen = pygame.display.set_mode((600, 700))
pygame.display.set_caption("Roll")

# Load button images
start_img = pygame.image.load("Images/start.png").convert_alpha()
exit_img = pygame.image.load("Images/exit.png").convert_alpha()
menu_img = pygame.image.load("Images/menu.png").convert_alpha()
roll_img = pygame.image.load("Images/roll.png").convert_alpha()
setting_img = pygame.image.load("Images/setting.png").convert_alpha()

# Create button instances for image buttons
start_button = button.Button(160, 250, start_img, width=300, height=150)
exit_button = button.Button(20, 30, exit_img, width=50, height=50)
backpack_button = button.Button(50, 500, menu_img, width=150, height=78)
roll_button = button.Button(222, 496, roll_img, width=150, height=88)
setting_button = button.Button(400, 504, setting_img, width=150, height=78)

# Inventory pop-up size and position
inventory_width, inventory_height = 300, 350  # Increased height for text and close button
inventory_position = ((600 - inventory_width) // 2, (700 - inventory_height) // 2)  # Center the inventory window

# Pygame font setup
font = pygame.font.SysFont(None, 36)

# Render text for 'Inventory'
inventory_text = font.render('Inventory', True, (255, 255, 255))  # White color text

# Define slot size and padding
slot_size = 32  # Each slot matches the idle animation's pixel size of 32x32
padding = 10    # Space between slots

# Calculate total width and height of the 5x5 slots grid
total_grid_width = (slot_size * 5) + (padding * 6)  # 5 slots + 6 paddings (one extra padding on each side)
total_grid_height = (slot_size * 5) + (padding * 6)  # Same as above for height

# Calculate offset to centralize the grid within the inventory window
offset_x = (inventory_width - total_grid_width) // 2
offset_y = (inventory_height - total_grid_height) // 2

# Create a 5x5 grid of inventory slots, centralized
inventory_slots = []
for row in range(5):
    for col in range(5):
        x = inventory_position[0] + offset_x + padding + col * (slot_size + padding)  # Adjusted X-position
        y = inventory_position[1] + offset_y + padding + row * (slot_size + padding)  # Adjusted Y-position
        inventory_slots.append((x, y))

# Load idle animation frames
idle_spritesheet_image = pygame.image.load('Images/idle_spritesheet.png').convert_alpha()
sprite_sheet = spritesheet.SpriteSheet(idle_spritesheet_image)

idle_frames = [sprite_sheet.get_image(i, 32, 32, 1, (0, 0, 0)) for i in range(4)]  # Assuming 4 frames

# Animation variables
selected_slot = None
animation_index = 0
inventory_opened = False
current_page = 1

def draw_inventory():
    """Draw the inventory window, slots, text, and close button."""
    global close_button_rect  # Make sure to declare as global to modify it outside this function

    # Draw inventory background
    pygame.draw.rect(screen, (50, 50, 50), (*inventory_position, inventory_width, inventory_height))

    # Draw 'Inventory' text
    screen.blit(inventory_text, (inventory_position[0] + 10, inventory_position[1] + 10))

    # Draw close button (rect and text 'X')
    close_button_rect = pygame.Rect(inventory_position[0] + inventory_width - 40, inventory_position[1] + 10, 30, 30)
    pygame.draw.rect(screen, (200, 0, 0), close_button_rect)  # Red button background
    pygame.draw.rect(screen, (255, 255, 255), close_button_rect, 2)  # White border
    close_text = font.render('X', True, (255, 255, 255))  # White 'X'
    screen.blit(close_text, (close_button_rect.x + 7, close_button_rect.y + 2))  # Positioning 'X' in the center

    # Draw inventory slots
    for i, (x, y) in enumerate(inventory_slots):
        pygame.draw.rect(screen, (100, 100, 100), (x, y, slot_size, slot_size))
        pygame.draw.rect(screen, (200, 200, 200), (x, y, slot_size, slot_size), 2)

        if selected_slot == i:  # Draw animation on the selected slot
            frame = idle_frames[animation_index // 10]
            screen.blit(frame, (x, y))

def roll():
    for x in r.Rarity:
        NotActualFinalChance = (r.FinalChance(1/(r.Rarity[x]), r.Luck, r.Bonus))
        ActualFinalChance = 1/NotActualFinalChance
        Result = random.randint(1, int(ActualFinalChance))
        if Result == 1:
            print(x)
            r.BonusRollCount += 1
            break
        else:
            continue

# Main loop
running = True
clock = pygame.time.Clock()

while running:
    screen.fill((202, 228, 241))

    if current_page == 1:
        # Main menu page
        if start_button.draw(screen):
            print("Start")
            current_page = 2
        if exit_button.draw(screen):
            running = False

    elif current_page == 2:
        # Game page
        screen.fill((204, 135, 230))

        if backpack_button.draw(screen):
            inventory_opened = True  # Open inventory

        if roll_button.draw(screen):
            roll()

        if setting_button.draw(screen):
            print("Settings open")

        if inventory_opened:
            draw_inventory()

    # Event handler
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        if inventory_opened:
            # Check if close button is clicked
            mouse_x, mouse_y = pygame.mouse.get_pos()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if close_button_rect.collidepoint(mouse_x, mouse_y):
                    inventory_opened = False  # Close inventory
            
            # Handle slot clicking and animation
            for i, (x, y) in enumerate(inventory_slots):
                if x <= mouse_x <= x + slot_size and y <= mouse_y <= y + slot_size:
                    if selected_slot != i:
                        selected_slot = i  # Update selected slot
                        animation_index = 0  # Reset animation index
                    break

    # Update the animation index
    if selected_slot is not None:
        animation_index += 1
        if animation_index >= len(idle_frames) * 10:
            animation_index = 0

    pygame.display.update()
    clock.tick(60)

pygame.quit()
